//brute force approach will be a nested one for each element iterate it's ahead all elements and find the first greater element when an element is properly or syricky decreasing one then it runs for 
// quadratic based solution
// Tc=o(n^2) SC=o(1)
// Optimal approach using stack 
// tc=o(n) SC=o(n) 

vector<long long> nextLargerElement(vector<long long> arr, int n){
        stack<long long>st;  vector<long long >ans; 
        for(int i=n-1;i>=0;i--)
        {
            if(st.empty())
            { st.push(arr[i]); ans.push_back(-1); }
            else {
                while(!st.empty() and st.top()<=arr[i])
                st.pop(); 
                if(st.empty()) { st.push(arr[i]); ans.push_back(-1); }
                else { ans.push_back(st.top());  st.push(arr[i]); }
            }
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
};

