// using merge sort approach 
// TC=O(NLOGN) SC=O(N)+O(N)

vector<pair<int,int>> a;
vector<int> ans; 
void merge(int l, int m, int r)
{
  vector<pair<int,int>>temp; 
  temp.resize(r-l+1); 
   int k=0; int sec=m;  int fir=l; 
    m++; int cnt=0; 
     while(l<=sec and m<=r){
      if(a[l].first>a[m].first){
          cnt++; temp[k]=a[m]; 
            k++; m++;} 
          else {
            ans[a[l].second]+=cnt;
             temp[k]=a[l]; 
             l++; k++; }
          }
        while(l<=sec) { 
        ans[a[l].second]+=cnt; 
        temp[k]=a[l]; 
           k++; l++;  }
         while(m<=r)
        { temp[k]=a[m]; 
           k++; m++;   }
         k=0; 
       for(int i=fir;i<=r;i++)
       {a[i]=temp[k];  k++; }}

void mergeSort(int l, int h)
{
   if(l==h) return ;
    int mid=l+(h-l)/2;
     mergeSort(l,mid); 
     mergeSort(mid+1,h);  
     merge(l,mid,h);  
}
vector<int> constructLowerArray(int *arr, int n) {
   ans.resize(n,0);
    for(int i=0;i<n;i++){
    a.push_back({arr[i],i});
  }
      mergeSort(0,n-1);
      return ans;
 }

// using policy based data structure 
// ordered set(insert and order of key have tc of NLOGN) 
vector<int> constructLowerArray(int *arr, int n) 
{ 
     vector<int> countSmaller(n, 0);
     tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update>
      ordered_set;
       for (int i = n - 1; i >= 0; i--) {
         countSmaller[i] = ordered_set.order_of_key(arr[i]);
         ordered_set.insert(arr[i]);
 }
  return countSmaller;
}

