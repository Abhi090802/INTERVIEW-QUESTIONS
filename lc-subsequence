//Time complexity of the naive recursive approach 
//is O(2^n) in worst case and worst case happens
// when all characters of X and Y mismatch 
//i.e., length of LCS is 0. 
// memoization approach tc=o(n*m) sc=o(n*m)+o(n+m) 
class Solution
{
    public:
  int helper(string &temp1,string &temp2,int i,int j,vector<vector<int>>&dp)
  {
      if(i<0 or j<0) return 0; 
      if(dp[i][j]!=-1) return dp[i][j];
      int take=0,nottake=0; 
      if(temp1[i]==temp2[j])
      take=1+helper(temp1,temp2,i-1,j-1,dp); 
      nottake=max(helper(temp1,temp2,i-1,j,dp),helper(temp1,temp2,i,j-1,dp));
      return dp[i][j]=max(take,nottake);
  } 
    int lcs(int x, int y, string s1, string s2)
    { vector<vector<int>>dp(s1.size(),vector<int>(s2.size(),-1));
      helper(s1,s2,x-1,y-1,dp);
      return dp[x-1][y-1];
    }
};


// tabulation approach 
//tc=o(m*n) sc=o(m*n)  
class Solution
{
    public:
    int lcs(int x, int y, string s1, string s2)
    {
       vector<vector<int>>dp(x+1,vector<int>(y+1,0)); 
      for(int i=0;i<=x;i++)
      dp[i][0]=0; 
      for(int j=0;j<=y;j++)
      dp[0][j]=0; 
      for(int i=1;i<=x;i++)
      {
          for(int j=1;j<=y;j++)
          {
              if(s1[i-1]==s2[j-1])
              dp[i][j]=1+dp[i-1][j-1];
              else dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
          }
      }
      return dp[x][y];
    }
};

// space optimization approach tc=o(m*n) sc=o(m*n) 
class Solution
{
    public:
    int lcs(int x, int y, string s1, string s2)
    {
      vector<int>prev(y+1,0); 
        vector<int>cur(y+1,0);
      for(int i=1;i<=x;i++)
      {
          for(int j=1;j<=y;j++)
          {
              if(s1[i-1]==s2[j-1])
              cur[j]=1+prev[j-1];
              else cur[j]=max(cur[j-1],prev[j]);
          }
          prev=cur;
      }
      return cur[y];
    }
};




