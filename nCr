// simple recusive approach tc=o(2^n) for each n two recusrion calls 
// asc=o(n) (nearly) 
// memoization approach self explanatory solution 
// tc=o(n*r) sc=o(n*r) 
class Solution{
public:int mod =1000000007;
     int helper(int n,int r,vector<vector<int>>&dp)
     {
         if(r>n) return 0; 
         if(r==0 or r==n) return dp[n][r]=1;
         if(dp[n][r]!=-1) return  dp[n][r]%mod; 
         return dp[n][r]=(helper(n-1,r-1,dp)%mod+helper(n-1,r,dp)%mod)%mod; 
     }
    int nCr(int n, int r){
      vector<vector<int>>dp(n+1,vector<int>
      (r+1,-1)); 
      return helper(n,r,dp); 
    }
};

// tabulation approach 
// tc=o(n*r) sc=o(n*r) 
class Solution{
public: int mod 1000000007; 
    int nCr(int n, int r){
      vector<vector<int>>dp(n+2,vector<int>
      (n+2,1));  
      if(n<r) return 0;
      for(int i=1;i<=n;i++)
      {
          for(int j=1;j<i;j++)
          {
              dp[i][j]=(dp[i-1][j-1]%mod+dp[i-1][j]%mod)%mod;
          }
      }
      return dp[n][r]%mod;
    }
};

// space optimization approach 
//tc=o(n*r) sc=o(n) 
class Solution{
public:  int mod 1000000007; 
      vector<int>cur(n+2,1); 
      vector<int>prev(n+1,1); 
      if(n<r) return 0;
      for(int i=1;i<=n;i++)
      {
          for(int j=1;j<i;j++)
          {
              cur[j]=(prev[j-1]%mod+prev[j]%mod)%mod;
          }
          prev=cur; 
      }
      return prev[r];
    }
};
